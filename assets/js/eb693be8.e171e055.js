"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5207],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),l=c(t),g=i,y=l["".concat(p,".").concat(g)]||l[g]||d[g]||o;return t?r.createElement(y,s(s({ref:n},u),{},{components:t})):r.createElement(y,s({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=l;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},49689:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return l}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),s=["components"],a={id:"VpnGateway",title:"VpnGateway"},p=void 0,c={unversionedId:"azure/resources/Network/VpnGateway",id:"azure/resources/Network/VpnGateway",isDocsHomePage:!1,title:"VpnGateway",description:"Provides a VpnGateway from the Network group",source:"@site/docs/azure/resources/Network/VpnGateway.md",sourceDirName:"azure/resources/Network",slug:"/azure/resources/Network/VpnGateway",permalink:"/docs/azure/resources/Network/VpnGateway",tags:[],version:"current",frontMatter:{id:"VpnGateway",title:"VpnGateway"},sidebar:"docs",previous:{title:"VpnConnection",permalink:"/docs/azure/resources/Network/VpnConnection"},next:{title:"VpnServerConfiguration",permalink:"/docs/azure/resources/Network/VpnServerConfiguration"}},u=[{value:"Examples",id:"examples",children:[{value:"VpnGatewayPut",id:"vpngatewayput",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],d={toc:u};function l(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Provides a ",(0,o.kt)("strong",{parentName:"p"},"VpnGateway")," from the ",(0,o.kt)("strong",{parentName:"p"},"Network")," group"),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"vpngatewayput"},"VpnGatewayPut"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'provider.Network.makeVpnGateway({\n  name: "myVpnGateway",\n  properties: () => ({\n    location: "westcentralus",\n    tags: { key1: "value1" },\n    properties: {\n      virtualHub: {\n        id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1",\n      },\n      connections: [\n        {\n          name: "vpnConnection1",\n          properties: {\n            remoteVpnSite: {\n              id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1",\n            },\n            vpnLinkConnections: [\n              {\n                name: "Connection-Link1",\n                properties: {\n                  vpnSiteLink: {\n                    id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnSites/vpnSite1/vpnSiteLinks/siteLink1",\n                  },\n                  connectionBandwidth: 200,\n                  vpnConnectionProtocolType: "IKEv2",\n                  sharedKey: "key",\n                  egressNatRules: [\n                    {\n                      id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/vpnGateways/gateway1/natRules/nat03",\n                    },\n                  ],\n                },\n              },\n            ],\n          },\n        },\n      ],\n      bgpSettings: {\n        asn: 65515,\n        peerWeight: 0,\n        bgpPeeringAddresses: [\n          {\n            ipconfigurationId: "Instance0",\n            customBgpIpAddresses: ["169.254.21.5"],\n          },\n          {\n            ipconfigurationId: "Instance1",\n            customBgpIpAddresses: ["169.254.21.10"],\n          },\n        ],\n      },\n      natRules: [\n        {\n          name: "nat03",\n          properties: {\n            type: "Static",\n            mode: "EgressSnat",\n            internalMappings: [{ addressSpace: "0.0.0.0/26" }],\n            externalMappings: [{ addressSpace: "192.168.0.0/26" }],\n            ipConfigurationId: "",\n          },\n        },\n      ],\n      isRoutingPreferenceInternet: false,\n      enableBgpRouteTranslationForNat: false,\n    },\n  }),\n  dependencies: ({ resources }) => ({\n    resourceGroup: resources.Resources.ResourceGroup["myResourceGroup"],\n    virtualHub: resources.Network.VirtualHub["myVirtualHub"],\n    vpnSite: resources.Network.VpnSite["myVpnSite"],\n    routeTable: resources.Network.RouteTable["myRouteTable"],\n    virtualHubIpConfiguration:\n      resources.Network.VirtualHubIpConfiguration[\n        "myVirtualHubIpConfiguration"\n      ],\n  }),\n});\n\n')),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Network/VirtualHub"},"VirtualHub")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Network/VpnSite"},"VpnSite")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Network/RouteTable"},"RouteTable")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Network/VirtualHubIpConfiguration"},"VirtualHubIpConfiguration"))),(0,o.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  required: [ 'location' ],\n  properties: {\n    properties: {\n      'x-ms-client-flatten': true,\n      description: 'Properties of the VPN gateway.',\n      properties: {\n        virtualHub: {\n          properties: { id: { type: 'string', description: 'Resource ID.' } },\n          description: 'Reference to another subresource.',\n          'x-ms-azure-resource': true\n        },\n        connections: {\n          type: 'array',\n          description: 'List of all vpn connections to the gateway.',\n          items: {\n            properties: {\n              properties: {\n                'x-ms-client-flatten': true,\n                description: 'Properties of the VPN connection.',\n                properties: {\n                  remoteVpnSite: {\n                    properties: { id: [Object] },\n                    description: 'Reference to another subresource.',\n                    'x-ms-azure-resource': true\n                  },\n                  routingWeight: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'Routing weight for vpn connection.'\n                  },\n                  dpdTimeoutSeconds: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'DPD timeout in seconds for vpn connection.'\n                  },\n                  connectionStatus: {\n                    description: 'The connection status.',\n                    type: 'string',\n                    readOnly: true,\n                    enum: [\n                      'Unknown',\n                      'Connecting',\n                      'Connected',\n                      'NotConnected'\n                    ],\n                    'x-ms-enum': {\n                      name: 'VpnConnectionStatus',\n                      modelAsString: true\n                    }\n                  },\n                  vpnConnectionProtocolType: {\n                    description: 'Connection protocol used for this connection.',\n                    type: 'string',\n                    enum: [ 'IKEv2', 'IKEv1' ],\n                    'x-ms-enum': {\n                      name: 'VirtualNetworkGatewayConnectionProtocol',\n                      modelAsString: true\n                    }\n                  },\n                  ingressBytesTransferred: {\n                    type: 'integer',\n                    format: 'int64',\n                    readOnly: true,\n                    description: 'Ingress bytes transferred.'\n                  },\n                  egressBytesTransferred: {\n                    type: 'integer',\n                    format: 'int64',\n                    readOnly: true,\n                    description: 'Egress bytes transferred.'\n                  },\n                  connectionBandwidth: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'Expected bandwidth in MBPS.'\n                  },\n                  sharedKey: {\n                    type: 'string',\n                    description: 'SharedKey for the vpn connection.'\n                  },\n                  enableBgp: { type: 'boolean', description: 'EnableBgp flag.' },\n                  usePolicyBasedTrafficSelectors: {\n                    type: 'boolean',\n                    description: 'Enable policy-based traffic selectors.'\n                  },\n                  ipsecPolicies: {\n                    type: 'array',\n                    items: {\n                      properties: [Object],\n                      required: [Array],\n                      description: 'An IPSec Policy configuration for a virtual network gateway connection.'\n                    },\n                    description: 'The IPSec Policies to be considered by this connection.'\n                  },\n                  trafficSelectorPolicies: {\n                    type: 'array',\n                    items: {\n                      properties: [Object],\n                      required: [Array],\n                      description: 'An traffic selector policy for a virtual network gateway connection.'\n                    },\n                    description: 'The Traffic Selector Policies to be considered by this connection.'\n                  },\n                  enableRateLimiting: { type: 'boolean', description: 'EnableBgp flag.' },\n                  enableInternetSecurity: {\n                    type: 'boolean',\n                    description: 'Enable internet security.'\n                  },\n                  useLocalAzureIpAddress: {\n                    type: 'boolean',\n                    description: 'Use local azure ip to initiate connection.'\n                  },\n                  provisioningState: {\n                    readOnly: true,\n                    description: 'The provisioning state of the VPN connection resource.',\n                    type: 'string',\n                    enum: [ 'Succeeded', 'Updating', 'Deleting', 'Failed' ],\n                    'x-ms-enum': { name: 'ProvisioningState', modelAsString: true }\n                  },\n                  vpnLinkConnections: {\n                    type: 'array',\n                    description: 'List of all vpn site link connections to the gateway.',\n                    items: {\n                      properties: [Object],\n                      allOf: [Array],\n                      description: 'VpnSiteLinkConnection Resource.'\n                    }\n                  },\n                  routingConfiguration: {\n                    description: 'The Routing Configuration indicating the associated and propagated route tables on this connection.',\n                    properties: {\n                      associatedRouteTable: [Object],\n                      propagatedRouteTables: [Object],\n                      vnetRoutes: [Object]\n                    }\n                  }\n                }\n              },\n              name: {\n                type: 'string',\n                description: 'The name of the resource that is unique within a resource group. This name can be used to access the resource.'\n              },\n              etag: {\n                type: 'string',\n                readOnly: true,\n                description: 'A unique read-only string that changes whenever the resource is updated.'\n              }\n            },\n            allOf: [\n              {\n                properties: { id: { type: 'string', description: 'Resource ID.' } },\n                description: 'Reference to another subresource.',\n                'x-ms-azure-resource': true\n              }\n            ],\n            description: 'VpnConnection Resource.'\n          }\n        },\n        bgpSettings: {\n          description: \"Local network gateway's BGP speaker settings.\",\n          properties: {\n            asn: {\n              type: 'integer',\n              format: 'int64',\n              minimum: 0,\n              maximum: 4294967295,\n              description: \"The BGP speaker's ASN.\"\n            },\n            bgpPeeringAddress: {\n              type: 'string',\n              description: 'The BGP peering address and BGP identifier of this BGP speaker.'\n            },\n            peerWeight: {\n              type: 'integer',\n              format: 'int32',\n              description: 'The weight added to routes learned from this BGP speaker.'\n            },\n            bgpPeeringAddresses: {\n              type: 'array',\n              items: {\n                properties: {\n                  ipconfigurationId: {\n                    type: 'string',\n                    description: 'The ID of IP configuration which belongs to gateway.'\n                  },\n                  defaultBgpIpAddresses: {\n                    readOnly: true,\n                    type: 'array',\n                    items: { type: 'string' },\n                    description: 'The list of default BGP peering addresses which belong to IP configuration.'\n                  },\n                  customBgpIpAddresses: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    description: 'The list of custom BGP peering addresses which belong to IP configuration.'\n                  },\n                  tunnelIpAddresses: {\n                    readOnly: true,\n                    type: 'array',\n                    items: { type: 'string' },\n                    description: 'The list of tunnel public IP addresses which belong to IP configuration.'\n                  }\n                },\n                description: 'Properties of IPConfigurationBgpPeeringAddress.'\n              },\n              description: 'BGP peering address with IP configuration ID for virtual network gateway.'\n            }\n          }\n        },\n        provisioningState: {\n          readOnly: true,\n          description: 'The provisioning state of the VPN gateway resource.',\n          type: 'string',\n          enum: [ 'Succeeded', 'Updating', 'Deleting', 'Failed' ],\n          'x-ms-enum': { name: 'ProvisioningState', modelAsString: true }\n        },\n        vpnGatewayScaleUnit: {\n          type: 'integer',\n          format: 'int32',\n          description: 'The scale unit for this vpn gateway.'\n        },\n        ipConfigurations: {\n          type: 'array',\n          readOnly: true,\n          description: 'List of all IPs configured on the gateway.',\n          items: {\n            description: 'IP Configuration of a VPN Gateway Resource.',\n            properties: {\n              id: {\n                type: 'string',\n                description: 'The identifier of the IP configuration for a VPN Gateway.'\n              },\n              publicIpAddress: {\n                type: 'string',\n                description: 'The public IP address of this IP configuration.'\n              },\n              privateIpAddress: {\n                type: 'string',\n                description: 'The private IP address of this IP configuration.'\n              }\n            }\n          }\n        },\n        enableBgpRouteTranslationForNat: {\n          type: 'boolean',\n          description: 'Enable BGP routes translation for NAT on this VpnGateway.'\n        },\n        isRoutingPreferenceInternet: {\n          type: 'boolean',\n          description: 'Enable Routing Preference property for the Public IP Interface of the VpnGateway.'\n        },\n        natRules: {\n          type: 'array',\n          description: 'List of all the nat Rules associated with the gateway.',\n          items: {\n            properties: {\n              properties: {\n                'x-ms-client-flatten': true,\n                description: 'Properties of the VpnGateway NAT rule.',\n                properties: {\n                  provisioningState: {\n                    readOnly: true,\n                    description: 'The provisioning state of the NAT Rule resource.',\n                    type: 'string',\n                    enum: [ 'Succeeded', 'Updating', 'Deleting', 'Failed' ],\n                    'x-ms-enum': { name: 'ProvisioningState', modelAsString: true }\n                  },\n                  type: {\n                    type: 'string',\n                    description: 'The type of NAT rule for VPN NAT.',\n                    enum: [ 'Static', 'Dynamic' ],\n                    'x-ms-enum': { name: 'VpnNatRuleType', modelAsString: true }\n                  },\n                  mode: {\n                    type: 'string',\n                    description: 'The Source NAT direction of a VPN NAT.',\n                    enum: [ 'EgressSnat', 'IngressSnat' ],\n                    'x-ms-enum': { name: 'VpnNatRuleMode', modelAsString: true }\n                  },\n                  internalMappings: {\n                    type: 'array',\n                    items: {\n                      properties: [Object],\n                      description: 'Vpn NatRule mapping.'\n                    },\n                    description: 'The private IP address internal mapping for NAT.'\n                  },\n                  externalMappings: {\n                    type: 'array',\n                    items: {\n                      properties: [Object],\n                      description: 'Vpn NatRule mapping.'\n                    },\n                    description: 'The private IP address external mapping for NAT.'\n                  },\n                  ipConfigurationId: {\n                    type: 'string',\n                    description: 'The IP Configuration ID this NAT rule applies to.'\n                  },\n                  egressVpnSiteLinkConnections: {\n                    type: 'array',\n                    readOnly: true,\n                    items: {\n                      properties: [Object],\n                      description: 'Reference to another subresource.',\n                      'x-ms-azure-resource': true\n                    },\n                    description: 'List of egress VpnSiteLinkConnections.'\n                  },\n                  ingressVpnSiteLinkConnections: {\n                    type: 'array',\n                    readOnly: true,\n                    items: {\n                      properties: [Object],\n                      description: 'Reference to another subresource.',\n                      'x-ms-azure-resource': true\n                    },\n                    description: 'List of ingress VpnSiteLinkConnections.'\n                  }\n                }\n              },\n              name: {\n                type: 'string',\n                description: 'The name of the resource that is unique within a resource group. This name can be used to access the resource.'\n              },\n              etag: {\n                type: 'string',\n                readOnly: true,\n                description: 'A unique read-only string that changes whenever the resource is updated.'\n              },\n              type: {\n                readOnly: true,\n                type: 'string',\n                description: 'Resource type.'\n              }\n            },\n            allOf: [\n              {\n                properties: { id: { type: 'string', description: 'Resource ID.' } },\n                description: 'Reference to another subresource.',\n                'x-ms-azure-resource': true\n              }\n            ],\n            description: 'VpnGatewayNatRule Resource.'\n          }\n        }\n      }\n    },\n    etag: {\n      type: 'string',\n      readOnly: true,\n      description: 'A unique read-only string that changes whenever the resource is updated.'\n    }\n  },\n  allOf: [\n    {\n      properties: {\n        id: { type: 'string', description: 'Resource ID.' },\n        name: {\n          readOnly: true,\n          type: 'string',\n          description: 'Resource name.'\n        },\n        type: {\n          readOnly: true,\n          type: 'string',\n          description: 'Resource type.'\n        },\n        location: { type: 'string', description: 'Resource location.' },\n        tags: {\n          type: 'object',\n          additionalProperties: { type: 'string' },\n          description: 'Resource tags.'\n        }\n      },\n      description: 'Common resource representation.',\n      'x-ms-azure-resource': true\n    }\n  ],\n  description: 'VpnGateway Resource.'\n}\n")),(0,o.kt)("h2",{id:"misc"},"Misc"),(0,o.kt)("p",null,"The resource version is ",(0,o.kt)("inlineCode",{parentName:"p"},"2021-05-01"),"."),(0,o.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/virtualWan.json"},"here"),"."))}l.isMDXComponent=!0}}]);
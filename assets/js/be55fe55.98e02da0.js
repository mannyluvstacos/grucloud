"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9174],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),p=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(a.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(t),f=i,m=d["".concat(a,".").concat(f)]||d[f]||l[f]||o;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=d;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:i,s[1]=c;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},69726:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),s=["components"],c={id:"SiteVNETConnection",title:"SiteVNETConnection"},a=void 0,p={unversionedId:"azure/resources/Web/SiteVNETConnection",id:"azure/resources/Web/SiteVNETConnection",isDocsHomePage:!1,title:"SiteVNETConnection",description:"Provides a SiteVNETConnection from the Web group",source:"@site/docs/azure/resources/Web/SiteVNETConnection.md",sourceDirName:"azure/resources/Web",slug:"/azure/resources/Web/SiteVNETConnection",permalink:"/docs/azure/resources/Web/SiteVNETConnection",tags:[],version:"current",frontMatter:{id:"SiteVNETConnection",title:"SiteVNETConnection"},sidebar:"docs",previous:{title:"SiteSourceControlSlot",permalink:"/docs/azure/resources/Web/SiteSourceControlSlot"},next:{title:"SiteVNETConnectionSlot",permalink:"/docs/azure/resources/Web/SiteVNETConnectionSlot"}},u=[{value:"Examples",id:"examples",children:[],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],l={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Provides a ",(0,o.kt)("strong",{parentName:"p"},"SiteVNETConnection")," from the ",(0,o.kt)("strong",{parentName:"p"},"Web")," group"),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/azure/resources/Web/Site"},"Site"))),(0,o.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'VNETInfo contract. This contract is public and is a stripped down version of VNETInfoInternal',\n  type: 'object',\n  allOf: [\n    {\n      required: [ 'location' ],\n      properties: {\n        id: { description: 'Resource Id', type: 'string' },\n        name: { description: 'Resource Name', type: 'string' },\n        kind: { description: 'Kind of resource', type: 'string' },\n        location: { description: 'Resource Location', type: 'string' },\n        type: { description: 'Resource type', type: 'string' },\n        tags: {\n          description: 'Resource tags',\n          type: 'object',\n          additionalProperties: { type: 'string' }\n        }\n      },\n      'x-ms-azure-resource': true\n    }\n  ],\n  properties: {\n    properties: {\n      properties: {\n        vnetResourceId: { description: 'The vnet resource id', type: 'string' },\n        certThumbprint: {\n          description: 'The client certificate thumbprint',\n          type: 'string'\n        },\n        certBlob: {\n          description: 'A certificate file (.cer) blob containing the public key of the private key used to authenticate a \\r\\n' +\n            '            Point-To-Site VPN connection.',\n          type: 'string'\n        },\n        routes: {\n          description: 'The routes that this virtual network connection uses.',\n          type: 'array',\n          items: {\n            description: 'VnetRoute contract used to pass routing information for a vnet.',\n            type: 'object',\n            allOf: [\n              {\n                required: [ 'location' ],\n                properties: {\n                  id: { description: 'Resource Id', type: 'string' },\n                  name: { description: 'Resource Name', type: 'string' },\n                  kind: { description: 'Kind of resource', type: 'string' },\n                  location: { description: 'Resource Location', type: 'string' },\n                  type: { description: 'Resource type', type: 'string' },\n                  tags: {\n                    description: 'Resource tags',\n                    type: 'object',\n                    additionalProperties: { type: 'string' }\n                  }\n                },\n                'x-ms-azure-resource': true\n              }\n            ],\n            properties: {\n              properties: {\n                properties: {\n                  name: {\n                    description: 'The name of this route. This is only returned by the server and does not need to be set by the client.',\n                    type: 'string'\n                  },\n                  startAddress: {\n                    description: 'The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.',\n                    type: 'string'\n                  },\n                  endAddress: {\n                    description: 'The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.',\n                    type: 'string'\n                  },\n                  routeType: {\n                    description: 'The type of route this is:\\r\\n' +\n                      '            DEFAULT - By default, every web app has routes to the local address ranges specified by RFC1918\\r\\n' +\n                      '            INHERITED - Routes inherited from the real Virtual Network routes\\r\\n' +\n                      '            STATIC - Static route set on the web app only\\r\\n' +\n                      '            \\r\\n' +\n                      \"            These values will be used for syncing a Web App's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\\r\\n\" +\n                      '            with new INHERITED routes.',\n                    type: 'string'\n                  }\n                },\n                'x-ms-client-flatten': true\n              }\n            }\n          }\n        },\n        resyncRequired: {\n          description: 'Flag to determine if a resync is required',\n          type: 'boolean'\n        },\n        dnsServers: {\n          description: 'Dns servers to be used by this VNET. This should be a comma-separated list of IP addresses.',\n          type: 'string'\n        }\n      },\n      'x-ms-client-flatten': true\n    }\n  }\n}\n")),(0,o.kt)("h2",{id:"misc"},"Misc"),(0,o.kt)("p",null,"The resource version is ",(0,o.kt)("inlineCode",{parentName:"p"},"2015-08-01"),"."),(0,o.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/web/resource-manager/Microsoft.Web/stable/2015-08-01/service.json"},"here"),"."))}d.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{244:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=r,m=u["".concat(a,".").concat(f)]||u[f]||d[f]||c;return n?o.a.createElement(m,i(i({ref:t},p),{},{components:n})):o.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,a=new Array(c);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<c;p++)a[p]=n[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),o=n(8),c=(n(0),n(244)),a={id:"gc",title:"gc"},i={unversionedId:"cli/gc",id:"cli/gc",isDocsHomePage:!1,title:"gc",description:"The gc command line interface is a short for GruCloud.",source:"@site/docs/cli/gc.md",sourceDirName:"cli",slug:"/cli/gc",permalink:"/docs/cli/gc",version:"current",frontMatter:{id:"gc",title:"gc"},sidebar:"docs",previous:{title:"Requirements",permalink:"/docs/k8s/K8sRequirements"},next:{title:"New Project",permalink:"/docs/cli/New"}},s=[],p={toc:s};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The ",Object(c.b)("strong",{parentName:"p"},"gc")," command line interface is a short for GruCloud.\nIt is a ",Object(c.b)("em",{parentName:"p"},"node js")," application which can be installed with ",Object(c.b)("em",{parentName:"p"},"npm")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"npm i -g @grucloud/core\n")),Object(c.b)("p",null,"Now check that ",Object(c.b)("strong",{parentName:"p"},"gc")," is installed correctly:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-sh"},"gc\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-txt"},"Usage: gc [options] [command]\n\nOptions:\n  -V, --version                  output the version number\n  -i, --infra <file>             infrastructure default is iac.js\n  -c, --config <file>            config file, default is config.js\n  -r, --resource <file>          additional resource file\n  -j, --json <file>              write result to a file in json format\n  -d, --workingDirectory <file>  The working directory.\n  --noOpen                       Do not open diagram\n  -h, --help                     display help for command\n\nCommands:\n  info [options]                 Get Information about the current project\n  new                            Create a new project\n  init|i                         Initialise the cloud providers\n  uninit|u                       Un-initialise the cloud providers\n  plan|p [options]               Find out which resources need to be deployed or destroyed\n  run|r [options]                run onDeployed or onDestroy\n  apply|a [options]              Apply the plan, a.k.a deploy the resources\n  destroy|d [options]            Destroy the resources\n  list|l [options]               List the live resources\n  output|o [options]             Output the value of a resource\n  graph|gt [options]             Output the target resources in a dot file and a graphical format such as SVG\n  tree|t [options]               Output the target resources as a mind map tree\n  gencode|c [options]            Generate infrastruture code from deployed resources\n  help [command]                 display help for command\nfredericheem@frederics-MacBook-Pro vm-simple-azure %\n")))}l.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{147:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(2),c=t(6),r=(t(0),t(213)),o={id:"AwsModuleHowto",title:"How to implement a new AWS Module"},i={id:"aws/AwsModuleHowto",isDocsHomePage:!1,title:"How to implement a new AWS Module",description:"This document will guide you through the implementation of new module for the GruCloud AWS provider.",source:"@site/docs/aws/AwsModuleHowto.md",permalink:"/docs/aws/AwsModuleHowto",sidebar:"someSidebar",previous:{title:"How to implement a new AWS Resources",permalink:"/docs/aws/AwsResourceHowto"},next:{title:"Certificate",permalink:"/docs/aws/resources/ACM/AcmCertificate"}},s=[{value:"Clone the code",id:"clone-the-code",children:[]},{value:"Dependencies",id:"dependencies",children:[]},{value:"Module boilerplate",id:"module-boilerplate",children:[]},{value:"Install dependencies",id:"install-dependencies",children:[]},{value:"config.js",id:"configjs",children:[{value:"iac.js",id:"iacjs",children:[]}]},{value:"package.json",id:"packagejson",children:[]},{value:"config.js",id:"configjs-1",children:[]},{value:"Generate the dependency graph",id:"generate-the-dependency-graph",children:[]}],l={rightToc:s};function p(e){var n=e.components,t=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This document will guide you through the implementation of new module for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/@grucloud/provider-aws"}),"GruCloud AWS provider"),"."),Object(r.b)("p",null,"A GruCloud module is just a bunch of functions to create a set of related resources, packaged and distributed with the node package manager NPM"),Object(r.b)("p",null,"A bunch of AWS GruCloud modules have already been crafted, check out the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/aws/AwsModules"}),"list of AWS GruCloud Module")),Object(r.b)("p",null,"Case study: VPC suited for EKS, the Amazon Elastic Kubernetes Service.\nThe following resources are required to create an EKS Cluster:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/Vpc"}),"VPC")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/InternetGateway"}),"Internet Gateway"),": one internet gateway attached to the VPC"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/Subnet"}),"Subnet"),": 2 public and 2 private subnets belong to the VPC."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/SecurityGroup"}),"SecurityGroup")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/ElasticIpAddress"}),"Elastic IP Address"),": required by the NAT Gateway"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/NatGateway"}),"NAT Gateway"),": a NAT gateway to allow the ec2 instances to connect to internet."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/RouteTables"}),"Route Table")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.grucloud.com/docs/aws/resources/EC2/Route"}),"Route"),": 3 routes for the public subnet and 3 routes for the private subnet")),Object(r.b)("p",null,"A picture is worth a thousand word, we'll be able to generate this dependency graph at the end of this tutorial:\n",Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"https://github.com/grucloud/grucloud/tree/main/packages/modules/aws/vpc/example/grucloud.svg",alt:"Graph"}))),Object(r.b)("h1",{id:"requirements"},"Requirements"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"AWS account"),Object(r.b)("li",{parentName:"ul"},"AWS CLI: ",Object(r.b)("inlineCode",{parentName:"li"},"aws --version")),Object(r.b)("li",{parentName:"ul"},"AWS access and secret key"),Object(r.b)("li",{parentName:"ul"},"Configure authentication ans region with ",Object(r.b)("inlineCode",{parentName:"li"},"aws configure")),Object(r.b)("li",{parentName:"ul"},"Node 14: ",Object(r.b)("inlineCode",{parentName:"li"},"node --version")),Object(r.b)("li",{parentName:"ul"},"VS code for editing and debugging.")),Object(r.b)("h1",{id:"getting-started"},"Getting Started"),Object(r.b)("h2",{id:"clone-the-code"},"Clone the code"),Object(r.b)("p",null,"Visit the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/grucloud/grucloud"}),"GruCloud github page")," and fork the monorepo."),Object(r.b)("p",null,"Clone the repository on your local machine:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"git clone git@github.com:<yourusername>/grucloud.git\ncd grucloud\n")),Object(r.b)("h2",{id:"dependencies"},"Dependencies"),Object(r.b)("p",null,"Install the dependencies and run the ",Object(r.b)("em",{parentName:"p"},"bootstrap")," npm script:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm install\nnpm run bootstrap\n")),Object(r.b)("h1",{id:"aws-vpc-module"},"Aws Vpc Module"),Object(r.b)("h2",{id:"module-boilerplate"},"Module boilerplate"),Object(r.b)("p",null,"Change to the aws module directory:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"cd packages/modules/aws\n")),Object(r.b)("p",null,"Create the module directory ",Object(r.b)("em",{parentName:"p"},"vpc")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"mkdir vpc\ncd vpc\n")),Object(r.b)("p",null,"We'll create the ",Object(r.b)("em",{parentName:"p"},"package.json")," with ",Object(r.b)("inlineCode",{parentName:"p"},"npm init")),Object(r.b)("p",null,"The package name in this case is ",Object(r.b)("em",{parentName:"p"},"@grucloud/module-aws-vpc"),"."),Object(r.b)("p",null,"The entry point will be ",Object(r.b)("em",{parentName:"p"},"iac.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm init\n")),Object(r.b)("p",null,"##\xa0.npmignore"),Object(r.b)("p",null,"This code will be published to NPM, therefore ensure ",Object(r.b)("em",{parentName:"p"},".npmignore")," excludes files and directories not needed by the published packages: logs, examples and tests."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"node_modules/\n*.log\n.vscode/\n**/test/*\nexample\n")),Object(r.b)("h2",{id:"install-dependencies"},"Install dependencies"),Object(r.b)("p",null,"Install the npm dependencies for this AWS module:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"npm install @grucloud/core @grucloud/provider-aws rubico\n")),Object(r.b)("p",null,"For testing, we'll use mocha that we install as a ",Object(r.b)("em",{parentName:"p"},"devDependencies"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"npm install -D mocha\n")),Object(r.b)("h2",{id:"configjs"},"config.js"),Object(r.b)("p",null,"Create the ",Object(r.b)("em",{parentName:"p"},"config.js")," file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'module.exports = ({ region }) => ({\n  vpc: {\n    vpc: { name: "vpc", CidrBlock: "192.168.0.0/16", Tags },\n    internetGateway: { name: "internet-gateway" },\n    eip: { name: "eip" },\n    subnets: {\n      publicTags: [],\n      public: [\n        {\n          name: "subnet-public-1",\n          CidrBlock: "192.168.0.0/19",\n          AvailabilityZone: `${region}a`,\n        },\n        {\n          name: "subnet-public-2",\n          CidrBlock: "192.168.32.0/19",\n          AvailabilityZone: `${region}b`,\n        },\n        {\n          name: "subnet-public-3",\n          CidrBlock: "192.168.64.0/19",\n          AvailabilityZone: `${region}c`,\n        },\n      ],\n      privateTags: [],\n      private: [\n        {\n          name: "subnet-private-1",\n          CidrBlock: "192.168.96.0/19",\n          AvailabilityZone: `${region}a`,\n        },\n        {\n          name: "subnet-private-2",\n          CidrBlock: "192.168.128.0/19",\n          AvailabilityZone: `${region}b`,\n        },\n        {\n          name: "subnet-private-3",\n          CidrBlock: "192.168.160.0/19",\n          AvailabilityZone: `${region}c`,\n        },\n      ],\n    },\n  },\n});\n')),Object(r.b)("h3",{id:"iacjs"},"iac.js"),Object(r.b)("p",null,"For a module, the ",Object(r.b)("em",{parentName:"p"},"iac.js")," must exports the ",Object(r.b)("strong",{parentName:"p"},"createResources")," function which takes an already created AWS provider. This ",Object(r.b)("strong",{parentName:"p"},"createResources")," is responsible for creating VPC, subnets, internet gateway, NAT gateway and an elastic IP address."),Object(r.b)("p",null,"We'll also exports the ",Object(r.b)("em",{parentName:"p"},"config")," from here."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const assert = require("assert");\nconst { get, map, pipe, assign, tap, and } = require("rubico");\n\nexports.config = require("./config");\n\nconst createResources = async ({ provider }) => {\n  const { config } = provider;\n  assert(config.vpc);\n  assert(config.vpc.vpc);\n  assert(config.vpc.internetGateway);\n  assert(config.vpc.eip);\n  assert(config.vpc.publics);\n  assert(config.vpc.privates);\n\n  const vpc = await provider.makeVpc({\n    name: config.vpc.vpc.name,\n    properties: () => ({\n      DnsHostnames: true,\n      CidrBlock: config.vpc.vpc.CidrBlock,\n      Tags: config.vpc.vpc.Tags,\n    }),\n  });\n\n  const internetGateway = await provider.makeInternetGateway({\n    name: config.internetGateway.name,\n    dependencies: { vpc },\n  });\n\n  const eip = await provider.makeElasticIpAddress({\n    name: config.eip.name,\n  });\n\n  //Public subnets\n  assert(config.vpc.subnet.public);\n\n  const publics = await map(({ name, CidrBlock, AvailabilityZone }) =>\n    pipe([\n      assign({\n        subnet: () =>\n          provider.makeSubnet({\n            name,\n            dependencies: { vpc },\n            properties: () => ({\n              CidrBlock,\n              AvailabilityZone,\n              Tags: config.vpc.subnets.publicTags,\n            }),\n          }),\n      }),\n      assign({\n        routeTable: ({ subnet }) =>\n          provider.makeRouteTables({\n            name: `route-table-${subnet.name}`,\n            dependencies: { vpc, subnet },\n          }),\n      }),\n      assign({\n        routeIg: ({ routeTable }) =>\n          provider.makeRoute({\n            name: `route-igw-${routeTable.name}`,\n            dependencies: { routeTable, ig },\n          }),\n      }),\n    ])()\n  )(config.vpc.subnets.public);\n\n  const subnet = publics[0].subnet;\n  const natGateway = await provider.makeNatGateway({\n    name: `nat-gateway-${subnet.name}`,\n    dependencies: { subnet, eip },\n  });\n\n  //Private\n  assert(config.vpc.subnets.private);\n\n  const privates = await map(({ name, CidrBlock, AvailabilityZone }) =>\n    pipe([\n      assign({\n        subnet: () =>\n          provider.makeSubnet({\n            name,\n            dependencies: { vpc },\n            properties: () => ({\n              CidrBlock,\n              AvailabilityZone,\n              Tags: config.vpc.subnets.privateTags,\n            }),\n          }),\n      }),\n      assign({\n        routeTable: ({ subnet }) =>\n          provider.makeRouteTables({\n            name: `route-table-${subnet.name}`,\n            dependencies: { vpc, subnet },\n          }),\n      }),\n      assign({\n        routeNat: ({ routeTable }) =>\n          provider.makeRoute({\n            name: `route-nat-${routeTable.name}`,\n            dependencies: { routeTable, natGateway },\n          }),\n      }),\n    ])()\n  )(config.vpc.subnets.private);\n\n  return {\n    vpc,\n    internetGateway,\n    eip,\n    natGateway,\n    privates,\n    publics,\n  };\n};\n\nexports.createResources = createResources;\n')),Object(r.b)("h1",{id:"example"},"Example"),Object(r.b)("p",null,"It is time to create an example to consume this module."),Object(r.b)("p",null,"We'll create its directory and package.json, install the dependencies, and create the ",Object(r.b)("em",{parentName:"p"},"config.js")," an ",Object(r.b)("em",{parentName:"p"},"iac.js")," file."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"mkdir example\ncd example\n")),Object(r.b)("h2",{id:"packagejson"},"package.json"),Object(r.b)("p",null,"Let's create the package.json with ",Object(r.b)("inlineCode",{parentName:"p"},"npm init"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The package name in this case is ",Object(r.b)("em",{parentName:"li"},"@grucloud/example-module-aws-vpc")),Object(r.b)("li",{parentName:"ul"},"The entry point is ",Object(r.b)("em",{parentName:"li"},"iac.js"))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"npm init\n")),Object(r.b)("p",null,"This package is not meant to be pusblished to NPM, hence set the ",Object(r.b)("em",{parentName:"p"},"private")," package.json field to ",Object(r.b)("em",{parentName:"p"},"true")),Object(r.b)("p",null,"We'll install the module ",Object(r.b)("em",{parentName:"p"},"@grucloud/module-aws-vpc")," that has been implemented in the last steps:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm install @grucloud/core @grucloud/provider-aws @grucloud/module-aws-vpc\n")),Object(r.b)("h2",{id:"configjs-1"},"config.js"),Object(r.b)("p",null,"The example config is rather simple, we can set the tags for the VPCs and subnets."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const pkg = require("./package.json");\nmodule.exports = ({ region }) => ({\n  projectName: pkg.name,\n  vpc: {\n    vpc: { Tags: [] },\n    subnets: {\n      publicTags: [],\n      privateTags: [],\n    },\n  },\n});\n')),Object(r.b)("p",null,"##\xa0iac.js"),Object(r.b)("p",null,"The file will export the ",Object(r.b)("em",{parentName:"p"},"createStack")," function. It uses the ",Object(r.b)("em",{parentName:"p"},"createResources")," and ",Object(r.b)("em",{parentName:"p"},"config")," function from this module: ",Object(r.b)("em",{parentName:"p"},"@grucloud/module-aws-vpc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const { AwsProvider } = require("@grucloud/provider-aws");\nconst ModuleAwsVpc = require("@grucloud/module-aws-vpc");\n// const ModuleAwsVpc = require("../iac"); When the package is not published yet.\n\nexports.createStack = async ({ config }) => {\n  const provider = AwsProvider({ configs: [config, ModuleAwsVpc.config] });\n  const resources = await ModuleAwsVpc.createResources({\n    provider,\n  });\n  return {\n    provider,\n    resources,\n  };\n};\n')),Object(r.b)("h2",{id:"generate-the-dependency-graph"},"Generate the dependency graph"),Object(r.b)("p",null,"Things can get quickly complicated, especially in term of dependencies. Some resources needs to created before others. Same for destruction, the order is paramount."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"graph")," command generates a graph from the ",Object(r.b)("em",{parentName:"p"},"iac.js")," file in the form of a ",Object(r.b)("em",{parentName:"p"},".dot")," file and an SVG."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"gc graph\n")),Object(r.b)("p",null,"##\xa0Running with gc"),Object(r.b)("p",null,"At this stage, one can use the usual ",Object(r.b)("em",{parentName:"p"},"gc")," commands: ",Object(r.b)("em",{parentName:"p"},"plan"),", ",Object(r.b)("em",{parentName:"p"},"apply"),", ",Object(r.b)("em",{parentName:"p"},"list")," and ",Object(r.b)("em",{parentName:"p"},"destroy")),Object(r.b)("h1",{id:"testing-with-mocha"},"Testing with mocha"),Object(r.b)("p",null,"Testing the module is not an option. We'll use mocha to write and run the test suite."),Object(r.b)("p",null,"First of all create the file ",Object(r.b)("em",{parentName:"p"},".mocharc.json")," and the following content:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "watch-files": ["**/*.js"],\n  "extension": ["js"],\n  "exclude": "node_modules",\n  "reporter": "spec",\n  "timeout": 300e3,\n  "ui": "bdd",\n  "bail": false,\n  "recursive": true\n}\n')),Object(r.b)("p",null,"Now we'll add a new entry in the ",Object(r.b)("em",{parentName:"p"},"scripts")," section of our ",Object(r.b)("em",{parentName:"p"},"package.json")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'//package.json\n  "scripts": {\n    "test": "mocha \'test/**/*.test.js\'"\n  },\n')),Object(r.b)("p",null,"Finally let's create a test suite for this module.\nCreate the ",Object(r.b)("em",{parentName:"p"},"test")," directory and add ",Object(r.b)("em",{parentName:"p"},"iac.test.js")," with the following content:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// test/iac.test.js\nconst assert = require("assert");\nconst cliCommands = require("@grucloud/core/cli/cliCommands");\nconst { createStack } = require("../example/iac");\nconst config = require("../example/config");\n\ndescribe("AWS VPC Module", async function () {\n  before(async function () {});\n  it("run workflow", async function () {\n    const infra = await createStack({ config });\n\n    await cliCommands.planDestroy({\n      infra,\n      commandOptions: { force: true },\n    });\n    await cliCommands.planApply({\n      infra,\n      commandOptions: { force: true },\n    });\n    await cliCommands.planDestroy({\n      infra,\n      commandOptions: { force: true },\n    });\n    // TODO list should be empty\n    const result = await cliCommands.list({\n      infra,\n      commandOptions: { our: true },\n    });\n    assert(result);\n  }).timeout(35 * 60e3);\n});\n')),Object(r.b)("p",null,"Ready to execute the test suite ?"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm test\n")))}p.isMDXComponent=!0},213:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),c=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,c=function(e,n){if(null==e)return{};var t,a,c={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var l=c.a.createContext({}),p=function(e){var n=c.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=p(e.components);return c.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},d=c.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||r;return t?c.a.createElement(m,i(i({ref:n},l),{},{components:t})):c.a.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<r;l++)o[l]=t[l];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);